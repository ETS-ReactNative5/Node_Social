{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/media/allen/SIMBAD/Flaskprojects/teklife/Teklife/Screens/PostPicture.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Icon from \"@expo/vector-icons/Ionicons\";\nimport React from \"react\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport HeaderButtons from \"react-navigation-header-buttons\";\nimport { Header } from \"react-native-elements\";\nimport { AuthContext } from \"../App\";\nvar WIDTH = Dimensions.get(\"window\").width;\nvar HEIGHT = Dimensions.get(\"window\").height;\nimport jwt_decode from \"jwt-decode\";\n\nvar PostPicture = function PostPicture(_ref) {\n  var route = _ref.route,\n      navigation = _ref.navigation;\n  var MyContext = React.createContext(MyContext);\n\n  var _React$useContext = React.useContext(AuthContext),\n      state = _React$useContext.state,\n      dispatch = _React$useContext.dispatch;\n\n  var url = state.url;\n  var initialState = {\n    post_caption: \"\",\n    post_media: \"\"\n  };\n\n  var _React$useState = React.useState(initialState),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      mystate = _React$useState2[0],\n      setState = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      loading = _React$useState4[0],\n      controlLoading = _React$useState4[1];\n\n  var token = state.token;\n  var decoded = jwt_decode(token);\n  var user_id = decoded;\n\n  var make_post = function make_post() {\n    controlLoading(true);\n    var uri = route.params.image;\n    var uriParts = route.params.image.split(\".\");\n    var filename = uri.split(\"/\").pop();\n    var fileType = uriParts[uriParts.length - 1];\n    var data = new FormData();\n    data.append(\"post_media\", {\n      uri: uri,\n      name: \"\" + filename,\n      type: \"image/\" + fileType\n    });\n    data.append(\"post_caption\", mystate.post_caption);\n    data.append(\"token\", state.token);\n    fetch(url + \"/code_reservoir/create_post.php\", {\n      method: \"POST\",\n      body: data,\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      controlLoading(false);\n      navigation.navigate(\"Home\");\n    }).catch(function (err) {\n      controlLoading(false);\n      alert(err);\n    });\n  };\n\n  var image = route.params.image;\n  return React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, loading ? React.createElement(View, {\n    style: styles.modalWrapper,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, React.createElement(Image, {\n    source: require(\"../Images/loader5.gif\"),\n    style: {\n      height: 100,\n      width: 100\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  })) : null, React.createElement(Header, {\n    placement: \"left\",\n    leftComponent: React.createElement(Icon, {\n      name: \"close-outline\",\n      size: 35,\n      color: \"black\",\n      onPress: function onPress() {\n        return navigation.goBack();\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }\n    }),\n    rightComponent: React.createElement(TouchableOpacity, {\n      onPress: function onPress() {\n        return make_post();\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }\n    }, React.createElement(Icon, {\n      name: \"checkmark-circle-outline\",\n      size: 35,\n      color: \"black\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }\n    })),\n    containerStyle: {\n      backgroundColor: \"#fff\",\n      height: 100\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }), React.createElement(ScrollView, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }, React.createElement(TextInput, {\n    multiline: true,\n    placeholder: \"Write a Caption . . .\",\n    style: styles.input,\n    onChangeText: function onChangeText(post_caption) {\n      setState(function (prevState) {\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          post_caption: post_caption\n        });\n      });\n    },\n    value: mystate.post_caption,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  })), React.createElement(Image, {\n    source: {\n      uri: \"\" + route.params.image\n    },\n    style: styles.myImage,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }\n  }), React.createElement(View, {\n    style: styles.postContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }\n  }))));\n};\n\nvar styles = StyleSheet.create({\n  myImage: {\n    height: 400,\n    width: \"100%\",\n    borderBottomLeftRadius: 10,\n    borderBottomRightRadius: 10,\n    marginTop: 10\n  },\n  input: {\n    marginTop: 100,\n    paddingTop: 20,\n    fontSize: 20,\n    paddingLeft: 10\n  },\n  myHeader: {\n    width: \"100%\",\n    paddingTop: 40,\n    paddingBottom: 30,\n    backgroundColor: \"#fff\"\n  },\n  postContainer: {\n    display: \"flex\",\n    alignItems: \"center\"\n  },\n  postButton: {\n    backgroundColor: \"#fff\",\n    borderWidth: 1,\n    borderRadius: 10,\n    width: 70,\n    height: 30,\n    borderColor: \"#333\",\n    color: \"#fff\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  modalWrapper: {\n    height: HEIGHT,\n    backgroundColor: \"#fff\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  }\n});\nexport default PostPicture;","map":{"version":3,"sources":["/media/allen/SIMBAD/Flaskprojects/teklife/Teklife/Screens/PostPicture.js"],"names":["Icon","React","HeaderButtons","Header","AuthContext","WIDTH","Dimensions","get","width","HEIGHT","height","jwt_decode","PostPicture","route","navigation","MyContext","createContext","useContext","state","dispatch","url","initialState","post_caption","post_media","useState","mystate","setState","loading","controlLoading","token","decoded","user_id","make_post","uri","params","image","uriParts","split","filename","pop","fileType","length","data","FormData","append","name","type","fetch","method","body","headers","then","res","json","navigate","catch","err","alert","styles","modalWrapper","require","goBack","backgroundColor","input","prevState","myImage","postContainer","StyleSheet","create","borderBottomLeftRadius","borderBottomRightRadius","marginTop","paddingTop","fontSize","paddingLeft","myHeader","paddingBottom","display","alignItems","postButton","borderWidth","borderRadius","borderColor","color","justifyContent"],"mappings":"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","sourcesContent":["import Icon from \"react-native-vector-icons/Ionicons\";\nimport React from \"react\";\nimport {\n  Image,\n  TextInput,\n  Text,\n  View,\n  StyleSheet,\n  ScrollView,\n  Dimensions,\n  TouchableOpacity\n} from \"react-native\";\nimport HeaderButtons from \"react-navigation-header-buttons\";\nimport { Header } from \"react-native-elements\";\nimport { AuthContext } from \"../App\";\n\nconst WIDTH = Dimensions.get(\"window\").width;\nconst HEIGHT = Dimensions.get(\"window\").height;\n\nimport jwt_decode from \"jwt-decode\";\n\nconst PostPicture = ({ route, navigation }) => {\n  const MyContext = React.createContext(MyContext);\n  const { state, dispatch } = React.useContext(AuthContext);\n  let url = state.url;\n  const initialState = {\n    post_caption: \"\",\n    post_media: \"\"\n  };\n  const [mystate, setState] = React.useState(initialState);\n  const [loading, controlLoading] = React.useState(false);\n\n  const token = state.token;\n  const decoded = jwt_decode(token);\n  const user_id = decoded;\n\n  const make_post = () => {\n    controlLoading(true);\n\n    let uri = route.params.image;\n    let uriParts = route.params.image.split(\".\");\n    let filename = uri.split(\"/\").pop();\n    let fileType = uriParts[uriParts.length - 1];\n    const data = new FormData();\n    data.append(\"post_media\", {\n      uri,\n      name: `${filename}`,\n      type: `image/${fileType}`\n    });\n    data.append(\"post_caption\", mystate.post_caption);\n    data.append(\"token\", state.token);\n\n    fetch(`${url}/code_reservoir/create_post.php`, {\n      method: \"POST\",\n      body: data,\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    })\n      .then(res => res.json())\n      .then(data => {\n        controlLoading(false);\n        //alert(data.message);\n        navigation.navigate(\"Home\");\n      })\n      .catch(err => {\n        controlLoading(false);\n        alert(err);\n      });\n  };\n\n  //state = { text: '' };\n\n  const { image } = route.params;\n  return (\n    <View>\n      {loading ? (\n        <View style={styles.modalWrapper}>\n          <Image\n            source={require(\"../Images/loader5.gif\")}\n            style={{ height: 100, width: 100 }}\n          />\n        </View>\n      ) : null}\n      <Header\n        placement=\"left\"\n        leftComponent={\n          <Icon\n            name=\"close-outline\"\n            size={35}\n            color=\"black\"\n            onPress={() => navigation.goBack()}\n          />\n        }\n        rightComponent={\n          <TouchableOpacity onPress={() => make_post()}>\n            <Icon name=\"checkmark-circle-outline\" size={35} color=\"black\" />\n          </TouchableOpacity>\n        }\n        containerStyle={{\n          backgroundColor: \"#fff\",\n          //justifyContent: 'space-around',\n          height: 100\n        }}\n      />\n      <ScrollView>\n        <View>\n          <View>\n            <TextInput\n              multiline\n              placeholder=\"Write a Caption . . .\"\n              style={styles.input}\n              onChangeText={post_caption => {\n                setState(prevState => ({ ...prevState, post_caption }));\n              }}\n              value={mystate.post_caption}\n            />\n          </View>\n          <Image\n            source={{ uri: `${route.params.image}` }}\n            style={styles.myImage}\n          />\n          <View style={styles.postContainer}></View>\n        </View>\n      </ScrollView>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  myImage: {\n    height: 400,\n    width: \"100%\",\n    borderBottomLeftRadius: 10,\n    borderBottomRightRadius: 10,\n    marginTop: 10\n  },\n  input: {\n    marginTop: 100,\n    paddingTop: 20,\n    fontSize: 20,\n    paddingLeft: 10\n  },\n\n  myHeader: {\n    width: \"100%\",\n    paddingTop: 40,\n    paddingBottom: 30,\n    backgroundColor: \"#fff\"\n  },\n\n  postContainer: {\n    display: \"flex\",\n    alignItems: \"center\"\n  },\n  postButton: {\n    backgroundColor: \"#fff\",\n    borderWidth: 1,\n    borderRadius: 10,\n    width: 70,\n    height: 30,\n    borderColor: \"#333\",\n    color: \"#fff\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n\n  modalWrapper: {\n    height: HEIGHT,\n    backgroundColor: \"#fff\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  }\n});\n\nexport default PostPicture;\n"]},"metadata":{},"sourceType":"module"}