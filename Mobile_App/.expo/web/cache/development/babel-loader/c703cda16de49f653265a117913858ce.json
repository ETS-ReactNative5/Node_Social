{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/media/allen/SIMBAD/Flaskprojects/teklife/Teklife/Screens/Shop.js\";\n\nimport React from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { AuthContext } from \"../App\";\nimport EventSource from \"react-native-event-source\";\nimport DrawerLayout from \"react-native-gesture-handler/DrawerLayout\";\nimport Constants from \"expo-constants\";\nimport * as Permissions from \"expo-permissions\";\nimport * as Notifications from \"expo-notifications\";\n\nvar io = require(\"socket.io-client\");\n\nvar Shop = function Shop() {\n  Notifications.setNotificationHandler({\n    handleNotification: function handleNotification() {\n      return _regeneratorRuntime.async(function handleNotification$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", {\n                shouldShowAlert: true,\n                shouldPlaySound: false,\n                shouldSetBadge: false\n              });\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  });\n\n  var _React$useState = React.useState(\"\"),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      expoPushToken = _React$useState2[0],\n      setExpoPushToken = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      notification = _React$useState4[0],\n      setNotification = _React$useState4[1];\n\n  var registerNotificationAsync = function registerNotificationAsync() {\n    var _ref, status, token;\n\n    return _regeneratorRuntime.async(function registerNotificationAsync$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(Permissions.getAsync(Permissions.NOTIFICATIONS));\n\n          case 2:\n            _ref = _context2.sent;\n            status = _ref.status;\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n          case 6:\n            token = _context2.sent;\n            console.log(token);\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  React.useEffect(function () {\n    registerNotificationAsync();\n  }, []);\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      alignItems: \"center\",\n      justifyContent: \"space-around\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, React.createElement(Button, {\n    title: \"Press to Send Notification\",\n    onPress: function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(sendPushNotification());\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }));\n\n  function sendPushNotification() {\n    var message;\n    return _regeneratorRuntime.async(function sendPushNotification$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            message = {\n              to: \"ExponentPushToken[iYljE4CKXr_uzXgnnQ1lyu]\",\n              sound: \"default\",\n              title: \"Original Title\",\n              body: \"And here is the body!\",\n              data: {\n                someData: \"goes here\"\n              }\n            };\n            _context4.next = 3;\n            return _regeneratorRuntime.awrap(fetch(\"https://exp.host/--/api/v2/push/send\", {\n              method: \"POST\",\n              body: JSON.stringify(message)\n            }));\n\n          case 3:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};\n\nexport default Shop;","map":{"version":3,"sources":["/media/allen/SIMBAD/Flaskprojects/teklife/Teklife/Screens/Shop.js"],"names":["React","AuthContext","EventSource","DrawerLayout","Constants","Permissions","Notifications","io","require","Shop","setNotificationHandler","handleNotification","shouldShowAlert","shouldPlaySound","shouldSetBadge","useState","expoPushToken","setExpoPushToken","notification","setNotification","registerNotificationAsync","getAsync","NOTIFICATIONS","status","getExpoPushTokenAsync","token","console","log","useEffect","flex","alignItems","justifyContent","sendPushNotification","message","to","sound","title","body","data","someData","fetch","method","JSON","stringify"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;;;;AAUA,SAASC,WAAT;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,YAAP,MAAyB,2CAAzB;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AAEA,OAAO,KAAKC,WAAZ,MAA6B,kBAA7B;AAEA,OAAO,KAAKC,aAAZ,MAA+B,oBAA/B;;AAEA,IAAMC,EAAE,GAAGC,OAAO,CAAC,kBAAD,CAAlB;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AACjBH,EAAAA,aAAa,CAACI,sBAAd,CAAqC;AACnCC,IAAAA,kBAAkB,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA,+CAAa;AAC/BC,gBAAAA,eAAe,EAAE,IADc;AAE/BC,gBAAAA,eAAe,EAAE,KAFc;AAG/BC,gBAAAA,cAAc,EAAE;AAHe,eAAb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADe,GAArC;;AADiB,wBAQyBd,KAAK,CAACe,QAAN,CAAe,EAAf,CARzB;AAAA;AAAA,MAQVC,aARU;AAAA,MAQKC,gBARL;;AAAA,yBASuBjB,KAAK,CAACe,QAAN,CAAe,KAAf,CATvB;AAAA;AAAA,MASVG,YATU;AAAA,MASIC,eATJ;;AAWjB,MAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACPf,WAAW,CAACgB,QAAZ,CAAqBhB,WAAW,CAACiB,aAAjC,CADO;;AAAA;AAAA;AACxBC,YAAAA,MADwB,QACxBA,MADwB;AAAA;AAAA,6CAGZjB,aAAa,CAACkB,qBAAd,EAHY;;AAAA;AAG1BC,YAAAA,KAH0B;AAKhCC,YAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;;AALgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlC;;AAQAzB,EAAAA,KAAK,CAAC4B,SAAN,CAAgB,YAAM;AACpBR,IAAAA,yBAAyB;AAC1B,GAFD,EAEG,EAFH;AAIA,SACE,oBAAC,IAAD;AACE,IAAA,KAAK,EAAE;AACLS,MAAAA,IAAI,EAAE,CADD;AAELC,MAAAA,UAAU,EAAE,QAFP;AAGLC,MAAAA,cAAc,EAAE;AAHX,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOE,oBAAC,MAAD;AACE,IAAA,KAAK,EAAC,4BADR;AAEE,IAAA,OAAO,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACDC,oBAAoB,EADnB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CADF;;AAkBA,WAAeA,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,YAAAA,OADR,GACkB;AACdC,cAAAA,EAAE,EAAE,2CADU;AAEdC,cAAAA,KAAK,EAAE,SAFO;AAGdC,cAAAA,KAAK,EAAE,gBAHO;AAIdC,cAAAA,IAAI,EAAE,uBAJQ;AAKdC,cAAAA,IAAI,EAAE;AAAEC,gBAAAA,QAAQ,EAAE;AAAZ;AALQ,aADlB;AAAA;AAAA,6CASQC,KAAK,CAAC,sCAAD,EAAyC;AAClDC,cAAAA,MAAM,EAAE,MAD0C;AAElDJ,cAAAA,IAAI,EAAEK,IAAI,CAACC,SAAL,CAAeV,OAAf;AAF4C,aAAzC,CATb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2DD,CApGD;;AAqGA,eAAexB,IAAf","sourcesContent":["import React from \"react\";\nimport {\n  Text,\n  View,\n  TextInput,\n  TouchableOpacity,\n  StyleSheet,\n  Button,\n  Platform\n} from \"react-native\";\nimport { AuthContext } from \"../App\";\nimport EventSource from \"react-native-event-source\";\nimport DrawerLayout from \"react-native-gesture-handler/DrawerLayout\";\nimport Constants from \"expo-constants\";\n//import { Permissions, Notifications } from \"expo\";\nimport * as Permissions from \"expo-permissions\";\n//import getPermission from \"../utils/getPermission\";\nimport * as Notifications from \"expo-notifications\";\n\nconst io = require(\"socket.io-client\");\n\nconst Shop = () => {\n  Notifications.setNotificationHandler({\n    handleNotification: async () => ({\n      shouldShowAlert: true,\n      shouldPlaySound: false,\n      shouldSetBadge: false\n    })\n  });\n  const [expoPushToken, setExpoPushToken] = React.useState(\"\");\n  const [notification, setNotification] = React.useState(false);\n\n  const registerNotificationAsync = async () => {\n    const { status } = await Permissions.getAsync(Permissions.NOTIFICATIONS);\n\n    const token = await Notifications.getExpoPushTokenAsync();\n\n    console.log(token);\n  };\n\n  React.useEffect(() => {\n    registerNotificationAsync();\n  }, []);\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        alignItems: \"center\",\n        justifyContent: \"space-around\"\n      }}\n    >\n      <Button\n        title=\"Press to Send Notification\"\n        onPress={async () => {\n          await sendPushNotification();\n        }}\n      />\n    </View>\n  );\n\n  // Can use this function below, OR use Expo's Push Notification Tool-> https://expo.io/notifications\n  async function sendPushNotification() {\n    const message = {\n      to: \"ExponentPushToken[iYljE4CKXr_uzXgnnQ1lyu]\",\n      sound: \"default\",\n      title: \"Original Title\",\n      body: \"And here is the body!\",\n      data: { someData: \"goes here\" }\n    };\n\n    await fetch(\"https://exp.host/--/api/v2/push/send\", {\n      method: \"POST\",\n      body: JSON.stringify(message)\n    });\n  }\n\n  /*\n  const [notification, setNotification] = React.useState(null);\n  const [messageText, setMessage] = React.useState(\"\");\n\n  const registerNotificationAsync = async () => {\n    const status = await Permissions.getAsync(Permissions.NOTIFICATIONS);\n\n    const token = await Notifications.getExpoPushTokenAsync();\n\n    console.log(token);\n  };\n\n  const send_notification = () => {\n    fetch(\"https://exp.host/--/api/v2/push/send\", {\n      method: \"POST\",\n      \"Content-Type\": \"application/json\",\n      body: JSON.stringify({\n        to: \"ExponentPushToken[iYljE4CKXr_uzXgnnQ1lyu]\",\n        title: \"title\",\n        body: \"body\",\n        data: \"Hey\"\n      })\n    }).catch(err => alert(err));\n  };\n  React.useEffect(() => {\n    registerNotificationAsync();\n  });\n\n  return (\n    <View style={{ marginTop: 200, alignItems: \"center\" }}>\n      <Text>Notification</Text>\n      <TouchableOpacity\n        onPress={() => send_notification()}\n        style={{\n          marginTop: 50,\n          width: 200,\n          height: 30,\n          backgroundColor: \"blue\"\n        }}\n      >\n        <Text>Test</Text>\n      </TouchableOpacity>\n    </View>\n  );*/\n};\nexport default Shop;\n"]},"metadata":{},"sourceType":"module"}