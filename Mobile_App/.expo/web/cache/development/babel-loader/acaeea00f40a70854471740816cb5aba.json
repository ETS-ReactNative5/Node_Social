{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/media/allen/SIMBAD/Flaskprojects/teklife/Teklife/Screens/LocateShuttle.js\";\n\nfunction _createSuper(Derived) {\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n\n    try {\n      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (isNativeReflectConstruct()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nimport React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Geolocation } from \"react-native-web/dist/index\";\nimport MapView, { PROVIDER_GOOGLE, Marker, Polyline } from \"react-native-maps\";\nimport Icon from \"@expo/vector-icons/Ionicons\";\nvar LATITUDE_DELTA = 0.009;\nvar LONGITUDE_DELTA = 0.00009;\nvar LATITUDE = 11.7934829;\nvar LONGITUDE = 111.9867401;\n\nvar LocateShuttle = function (_React$Component) {\n  _inherits(LocateShuttle, _React$Component);\n\n  var _super = _createSuper(LocateShuttle);\n\n  function LocateShuttle(props) {\n    var _this;\n\n    _classCallCheck(this, LocateShuttle);\n\n    _this = _super.call(this, props);\n\n    _this.getMapRegion = function () {\n      return {\n        latitude: _this.state.latitude,\n        longitude: _this.state.longitude,\n        longitudeDelta: LONGITUDE_DELTA,\n        latitudeDelta: LATITUDE_DELTA\n      };\n    };\n\n    _this.state = {\n      latitude: LATITUDE,\n      longitude: LONGITUDE,\n      longitudeDelta: 0.09,\n      latitudeDelta: 0.02,\n      error: null,\n      routeCoordinate: []\n    };\n    return _this;\n  }\n\n  _createClass(LocateShuttle, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      navigator.geolocation.watchPosition(function (position) {\n        var _position$coords = position.coords,\n            latitude = _position$coords.latitude,\n            longitude = _position$coords.longitude;\n        var routeCoordinates = _this2.state.routeCoordinates;\n        var newCoordinate = {\n          latitude: latitude,\n          longitude: longitude\n        };\n\n        _this2.setState({\n          latitude: latitude,\n          longitude: longitude,\n          routeCoordinates: routeCoordinates.concat([newCoordinate])\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: {\n          flex: 1\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 7\n        }\n      }, React.createElement(MapView, {\n        provider: PROVIDER_GOOGLE,\n        region: this.getMapRegion(),\n        style: {\n          flex: 1\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 9\n        }\n      }, React.createElement(Marker, {\n        coordinate: this.getMapRegion(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }\n      })));\n    }\n  }]);\n\n  return LocateShuttle;\n}(React.Component);\n\nexport default LocateShuttle;","map":{"version":3,"sources":["/media/allen/SIMBAD/Flaskprojects/teklife/Teklife/Screens/LocateShuttle.js"],"names":["React","Geolocation","MapView","PROVIDER_GOOGLE","Marker","Polyline","Icon","LATITUDE_DELTA","LONGITUDE_DELTA","LATITUDE","LONGITUDE","LocateShuttle","props","getMapRegion","latitude","state","longitude","longitudeDelta","latitudeDelta","error","routeCoordinate","navigator","geolocation","watchPosition","position","coords","routeCoordinates","newCoordinate","setState","concat","flex","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;SACiCC,W;AACjC,OAAOC,OAAP,IAAkBC,eAAlB,EAAmCC,MAAnC,EAA2CC,QAA3C,QAA2D,mBAA3D;AACA,OAAOC,IAAP;AACA,IAAMC,cAAc,GAAG,KAAvB;AACA,IAAMC,eAAe,GAAG,OAAxB;AACA,IAAMC,QAAQ,GAAG,UAAjB;AACA,IAAMC,SAAS,GAAG,WAAlB;;IAEMC,a;;;;;AACJ,yBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;;AADiB,UAWnBC,YAXmB,GAWJ;AAAA,aAAO;AACpBC,QAAAA,QAAQ,EAAE,MAAKC,KAAL,CAAWD,QADD;AAEpBE,QAAAA,SAAS,EAAE,MAAKD,KAAL,CAAWC,SAFF;AAGpBC,QAAAA,cAAc,EAAET,eAHI;AAIpBU,QAAAA,aAAa,EAAEX;AAJK,OAAP;AAAA,KAXI;;AAEjB,UAAKQ,KAAL,GAAa;AACXD,MAAAA,QAAQ,EAAEL,QADC;AAEXO,MAAAA,SAAS,EAAEN,SAFA;AAGXO,MAAAA,cAAc,EAAE,IAHL;AAIXC,MAAAA,aAAa,EAAE,IAJJ;AAKXC,MAAAA,KAAK,EAAE,IALI;AAMXC,MAAAA,eAAe,EAAE;AANN,KAAb;AAFiB;AAUlB;;;;wCAQmB;AAAA;;AAUlBC,MAAAA,SAAS,CAACC,WAAV,CAAsBC,aAAtB,CAAoC,UAAAC,QAAQ,EAAI;AAAA,+BACdA,QAAQ,CAACC,MADK;AAAA,YACtCX,QADsC,oBACtCA,QADsC;AAAA,YAC5BE,SAD4B,oBAC5BA,SAD4B;AAAA,YAEtCU,gBAFsC,GAEjB,MAAI,CAACX,KAFY,CAEtCW,gBAFsC;AAG9C,YAAMC,aAAa,GAAG;AACpBb,UAAAA,QAAQ,EAARA,QADoB;AAEpBE,UAAAA,SAAS,EAATA;AAFoB,SAAtB;;AAIA,QAAA,MAAI,CAACY,QAAL,CAAc;AACZd,UAAAA,QAAQ,EAARA,QADY;AAEZE,UAAAA,SAAS,EAATA,SAFY;AAGZU,UAAAA,gBAAgB,EAAEA,gBAAgB,CAACG,MAAjB,CAAwB,CAACF,aAAD,CAAxB;AAHN,SAAd;AAKD,OAZD;AAaD;;;6BAEQ;AACP,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAEG,UAAAA,IAAI,EAAE;AAAR,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,OAAD;AACE,QAAA,QAAQ,EAAE3B,eADZ;AAEE,QAAA,MAAM,EAAE,KAAKU,YAAL,EAFV;AAGE,QAAA,KAAK,EAAE;AAAEiB,UAAAA,IAAI,EAAE;AAAR,SAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKE,oBAAC,MAAD;AAAQ,QAAA,UAAU,EAAE,KAAKjB,YAAL,EAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALF,CADF,CADF;AAgBD;;;;EA7DyBb,KAAK,CAAC+B,S;;AA+DlC,eAAepB,aAAf","sourcesContent":["import React from \"react\";\nimport { View, Text, StyleSheet, Geolocation } from \"react-native\";\nimport MapView, { PROVIDER_GOOGLE, Marker, Polyline } from \"react-native-maps\";\nimport Icon from \"react-native-vector-icons/Ionicons\";\nconst LATITUDE_DELTA = 0.009;\nconst LONGITUDE_DELTA = 0.00009;\nconst LATITUDE = 11.7934829;\nconst LONGITUDE = 111.9867401;\n\nclass LocateShuttle extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      latitude: LATITUDE,\n      longitude: LONGITUDE,\n      longitudeDelta: 0.09,\n      latitudeDelta: 0.02,\n      error: null,\n      routeCoordinate: []\n    };\n  }\n  getMapRegion = () => ({\n    latitude: this.state.latitude,\n    longitude: this.state.longitude,\n    longitudeDelta: LONGITUDE_DELTA,\n    latitudeDelta: LATITUDE_DELTA\n  });\n\n  componentDidMount() {\n    /* navigator.geolocation.getCurrentPosition(position => {\n      console.log(position);\n      this.setState({\n        latitude: position.coords.latitude,\n        longitude: position.coords.longitude,\n        error: null\n      });\n    });*/\n\n    navigator.geolocation.watchPosition(position => {\n      const { latitude, longitude } = position.coords;\n      const { routeCoordinates } = this.state;\n      const newCoordinate = {\n        latitude,\n        longitude\n      };\n      this.setState({\n        latitude,\n        longitude,\n        routeCoordinates: routeCoordinates.concat([newCoordinate])\n      });\n    });\n  }\n\n  render() {\n    return (\n      <View style={{ flex: 1 }}>\n        <MapView\n          provider={PROVIDER_GOOGLE}\n          region={this.getMapRegion()}\n          style={{ flex: 1 }}\n        >\n          <Marker coordinate={this.getMapRegion()} />\n          {/*<Polyline\n            coordinates={this.state.routeCoordinates}\n            strokeWidth={2}\n            strokeColor=\"#000\"\n          />*/}\n        </MapView>\n      </View>\n    );\n  }\n}\nexport default LocateShuttle;\n/*\nconst LocateShuttle = () => {\n  const [longitude, setLongitude] = React.useState(LONGITUDE);\n  const [latitude, setLatitude] = React.useState(LATITUDE);\n  const [routeCoordinate, setRouteCoordinate] = React.useState(0.0);\n  const [coordinates] = React.useState(\n    {\n      latitude: 48.8587741,\n      longitude: 2.2069771\n    },\n    {\n      latitude: 48.8323785,\n      longitude: 2.3361663\n    }\n  );\n\n  const getMapRegion = () => ({\n    latitude: latitude,\n    longitude: longitude,\n    latitudeDelta: LATITUDE_DELTA,\n    longitudeDelta: LONGITUDE_DELTA\n  });\n\n  React.useEffect(() => {\n    navigator.geolocation.getCurrentPosition(\n      position => {\n        coordinates[0].latitude = position.coords.latitude;\n        coordinates[0].longitude = position.coords.longitude;\n      },\n      {\n        enableHighAccuracy: true,\n        timeout: 20000,\n        maximumAge: 1000,\n        distanceFilter: 10\n      }\n    );\n\n    navigator.geolocation.watchPosition(\n      position => {\n        const { latitude, longitude } = position.coords;\n        const newCoordinate = { latitude, longitude };\n        setRouteCoordinate(routeCoordinate);\n        routeCoordinate.concat(newCoordinate);\n      },\n      {\n        enableHighAccuracy: true,\n        timeout: 20000,\n        maximumAge: 1000,\n        distanceFilter: 10\n      }\n    );\n  }, []);\n\n  return (\n    <View style={{ flex: 1 }}>\n      <MapView\n        provider={PROVIDER_GOOGLE}\n        initialRegion={{\n          latitude: coordinates[0],\n          longitude: coordinates[0],\n          latitudeDelta: 0.009,\n          longitudeDelta: 0.00009\n        }}\n        style={{ flex: 1 }}\n      >\n        <Marker coordinate={coordinates[1]} />\n        <Polyline\n          coordinates={coordinates[0]}\n          strokeWidth={2}\n          strokeColor=\"#000\"\n        />\n      </MapView>\n    </View>\n  );\n};\nexport default LocateShuttle;*/\n"]},"metadata":{},"sourceType":"module"}